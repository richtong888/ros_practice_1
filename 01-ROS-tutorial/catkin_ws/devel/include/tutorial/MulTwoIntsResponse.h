// Generated by gencpp from file tutorial/MulTwoIntsResponse.msg
// DO NOT EDIT!


#ifndef TUTORIAL_MESSAGE_MULTWOINTSRESPONSE_H
#define TUTORIAL_MESSAGE_MULTWOINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tutorial
{
template <class ContainerAllocator>
struct MulTwoIntsResponse_
{
  typedef MulTwoIntsResponse_<ContainerAllocator> Type;

  MulTwoIntsResponse_()
    : sum(0)
    , multi(0)  {
    }
  MulTwoIntsResponse_(const ContainerAllocator& _alloc)
    : sum(0)
    , multi(0)  {
  (void)_alloc;
    }



   typedef int32_t _sum_type;
  _sum_type sum;

   typedef int32_t _multi_type;
  _multi_type multi;





  typedef boost::shared_ptr< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MulTwoIntsResponse_

typedef ::tutorial::MulTwoIntsResponse_<std::allocator<void> > MulTwoIntsResponse;

typedef boost::shared_ptr< ::tutorial::MulTwoIntsResponse > MulTwoIntsResponsePtr;
typedef boost::shared_ptr< ::tutorial::MulTwoIntsResponse const> MulTwoIntsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tutorial::MulTwoIntsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tutorial::MulTwoIntsResponse_<ContainerAllocator1> & lhs, const ::tutorial::MulTwoIntsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.sum == rhs.sum &&
    lhs.multi == rhs.multi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tutorial::MulTwoIntsResponse_<ContainerAllocator1> & lhs, const ::tutorial::MulTwoIntsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tutorial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7f9c742c095b693230ffb1b6c377e6c";
  }

  static const char* value(const ::tutorial::MulTwoIntsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7f9c742c095b693ULL;
  static const uint64_t static_value2 = 0x230ffb1b6c377e6cULL;
};

template<class ContainerAllocator>
struct DataType< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tutorial/MulTwoIntsResponse";
  }

  static const char* value(const ::tutorial::MulTwoIntsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 sum\n"
"int32 multi\n"
"\n"
;
  }

  static const char* value(const ::tutorial::MulTwoIntsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sum);
      stream.next(m.multi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MulTwoIntsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tutorial::MulTwoIntsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tutorial::MulTwoIntsResponse_<ContainerAllocator>& v)
  {
    s << indent << "sum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sum);
    s << indent << "multi: ";
    Printer<int32_t>::stream(s, indent + "  ", v.multi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUTORIAL_MESSAGE_MULTWOINTSRESPONSE_H
